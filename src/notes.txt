<<<<<<< HEAD
there can only be one parent for a jsx component. that means
const AppLayout =()=>{
   return(
    <div>
        <HeaderComponent/>
        <Body/>
        <Footer/>
        
    </div>
   )
}
only this is allowed. we cant return without the div
otherway to do this is by using react.Fragment


react.Fragment():
we can't return like h1and h2 in jsx directly firtly they have to be wrapped in a div and then
we should return that div.
this can be avoided by usig react.Fragment tag or simply empty <> braces

it is a component exported by the react. 
const AppLayout =()=>{
   return(
    <React.Fragment>
        <HeaderComponent/>
        <Body/>
        <Footer/>

    </React.Fragment>
   )
}
or simply write:
const AppLayout =()=>{
   return(
    <>
        <HeaderComponent/>
        <Body/>
        <Footer/>

    </>  //short hand for react.Fragment
   )
}

how to add inline styles in jsx using react:

const styleObj={
    backgroundColor:"pink"
}

const AppLayout =()=>{
   return(
    <div style={styleObj}>
        <HeaderComponent/>
        <Body/>
        <Footer/>
        
    </div>
   )
}

this is one way , we can also select the element and write its style in external file

//config driven ui:
when we build a real world application. we want our website to work in different locations with 
differrent offeres, we control our website frontend using config , its knowns as config driven ui
the config is driven by api and backend.

Virtual DOM:
it is not just a concept of react. its a software engg concept
we keep a representation of our dom in our code. this is known as virtual dom.

why do we need virtual dom?
we need virtual dom for :

1.reconciliation:
it is a dif algorithm used by the react
it is a algorithm to find difference one tree from other.
it determines what needs to be updated 


eg:
div>d1,d2,d3,d4
after modifications: div>d1,d2,d3,d4,d5

here react cant differentiate bw them, as all are of same type
it will re-render everything.
whenever any changes are detected , react will re-render everything
but if we use key attribute which is unique to each element , now our react will know 
the exact modifications and will render only the things which are updated 
by using the diff algorithm

why use key?
so we need keys to uniquely identify each element, its acutally useful in virtual dom
for the reconciliation.
that is whenever any updates are done by the diff algorithm react knowns where it happeend
with the help of a key and will only re-render the specific portion of the app which 
is updated

if there is no key, react cant uniquely identify so it has to rerender everything

simply:
okala key undi ante just aa portion ni re-render chestadi react, ledu ante react ki ardam
kadu edo change indi ani telustadi with the help of diff algorithm by reconciliation 
so motham anta malla re-render chestadi edi time waste so we can use key 
key vadite updates fast ga render avtadi
and this is one of the reason why react is fast.


React Fiber is a new reconciliation engine. it came in react16
this is responsible for diff algorithm.

//react Fiber :


why not to use index as a key:

use unique key if available
use index if we dont have any unique
no key is not acceptable
=======
there can only be one parent for a jsx component. that means
const AppLayout =()=>{
   return(
    <div>
        <HeaderComponent/>
        <Body/>
        <Footer/>
        
    </div>
   )
}
only this is allowed. we cant return without the div
otherway to do this is by using react.Fragment


react.Fragment():
we can't return like h1and h2 in jsx directly firtly they have to be wrapped in a div and then
we should return that div.
this can be avoided by usig react.Fragment tag or simply empty <> braces

it is a component exported by the react. 
const AppLayout =()=>{
   return(
    <React.Fragment>
        <HeaderComponent/>
        <Body/>
        <Footer/>

    </React.Fragment>
   )
}
or simply write:
const AppLayout =()=>{
   return(
    <>
        <HeaderComponent/>
        <Body/>
        <Footer/>

    </>  //short hand for react.Fragment
   )
}

how to add inline styles in jsx using react:

const styleObj={
    backgroundColor:"pink"
}

const AppLayout =()=>{
   return(
    <div style={styleObj}>
        <HeaderComponent/>
        <Body/>
        <Footer/>
        
    </div>
   )
}

this is one way , we can also select the element and write its style in external file

//config driven ui:
when we build a real world application. we want our website to work in different locations with 
differrent offeres, we control our website frontend using config , its knowns as config driven ui
the config is driven by api and backend.

Virtual DOM:
it is not just a concept of react. its a software engg concept
we keep a representation of our dom in our code. this is known as virtual dom.

why do we need virtual dom?
we need virtual dom for :

1.reconciliation:
it is a dif algorithm used by the react
it is a algorithm to find difference one tree from other.
it determines what needs to be updated 


eg:
div>d1,d2,d3,d4
after modifications: div>d1,d2,d3,d4,d5

here react cant differentiate bw them, as all are of same type
it will re-render everything.
whenever any changes are detected , react will re-render everything
but if we use key attribute which is unique to each element , now our react will know 
the exact modifications and will render only the things which are updated 
by using the diff algorithm

why use key?
so we need keys to uniquely identify each element, its acutally useful in virtual dom
for the reconciliation.
that is whenever any updates are done by the diff algorithm react knowns where it happeend
with the help of a key and will only re-render the specific portion of the app which 
is updated

if there is no key, react cant uniquely identify so it has to rerender everything

simply:
okala key undi ante just aa portion ni re-render chestadi react, ledu ante react ki ardam
kadu edo change indi ani telustadi with the help of diff algorithm by reconciliation 
so motham anta malla re-render chestadi edi time waste so we can use key 
key vadite updates fast ga render avtadi
and this is one of the reason why react is fast.


React Fiber is a new reconciliation engine. it came in react16
this is responsible for diff algorithm.

//react Fiber :


why not to use index as a key:

use unique key if available
use index if we dont have any unique
no key is not acceptable
>>>>>>> f1d2586 (adding initial files)
